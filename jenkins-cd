pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: 'create\ndestroy\ndestroyekscluster', description: 'Create/Update or destroy the eks cluster') 
        string(name: 'cluster', defaultValue: 'sai-cluster', description: 'Eks cluster name') 
        string(name: 'region', defaultValue: 'us-east-1', description: 'Eks cluster region')
        string(name: 'outputformat', defaultValue: 'yaml', description: 'Eks cluster outputformat')
    }

    environment {
        ACCESS_KEY = 'AKIAXD2NS22QRNJW554F'
        SECRET_KEY = '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'
    }

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Saikrish96769/java-app.git'
            }
        }
        stage('eks connect') {
            steps {
                script {
                def aws = "/usr/local/bin/aws"
                dir('/Users/saikrish/.jenkins/workspace/java-deploy') { 
                sh """
                    ${aws} configure set aws_access_key_id "$ACCESS_KEY"
                    ${aws} configure set aws_secret_access_key "$SECRET_KEY" 
                    ${aws} configure set region "${params.region}"
                    ${aws} configure set outputformat "${params.outputformat}"
                    ${aws} s3 ls
                    ${aws} eks update-kubeconfig --region ${params.region} --name ${params.cluster}
                """
            }
        }
        }
        }
        stage('eks deployments') {
            when {
                expression {
                    params.action == 'create'
                }
            }
            steps {
                script {
                    def apply = false
                    def awsvault = "/opt/homebrew/bin/aws-vault"
                    def kubectl = "/opt/homebrew/bin/kubectl" 
                    try {
                        input message: 'Please confirm the apply to initiate the deployments', ok: 'Ready to apply the config'
                        apply = true
                    } catch(err) {
                        apply = false
                        CurrentBuild.result = 'UNSTABLE'
                    }
                    if (apply) {// Replace with the actual path to the Docker executable on your macOS machine
                        dir('/Users/saikrish/.jenkins/workspace/java-deploy') { 
                        sh """
                            pwd
                            ${awsvault} exec default -- ${kubectl} apply -f .
                        """
                    }
                    }
                }
            }
        }

        stage('Delete deployments') {
            when {
                expression {
                    params.action == 'destroy'
                }
            }
            steps {
                script {
                    def destroy = false
                    def kubectl = "/opt/homebrew/bin/kubectl"
                    def awsvault = "/opt/homebrew/bin/aws-vault" 
                    try {
                        input message: 'Please confirm the destroy to delete the deployments', ok: 'Ready to destroy the config'
                        destroy = true
                    } catch(err) {
                        destroy = false
                        CurrentBuild.result = 'UNSTABLE'
                    }
                    if (destroy) {
                        // Replace with the actual path to the Docker executable on your macOS machine
                        dir('/Users/saikrish/.jenkins/workspace/java-deploy') { 
                        sh """
                            ${awsvault} exec default -- ${kubectl} delete -f .
                        """
                    }
                }
                }
            }
        }
    }
}
